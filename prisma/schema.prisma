// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Semester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  students              Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("semesters")
}

model AcademicFaculty {
  id          String       @id @default(uuid())
  title       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
  students    Student[]
  faculties   Faculty[]

  @@map("academicfaculties")
}

model Department {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFacultyId String
  students          Student[]
  faculties         Faculty[]
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])

  @@map("departments")
}

model Student {
  id                String          @id @default(uuid())
  studentId         String
  firstName         String
  lastName          String
  middleName        String
  profileImage      String
  email             String
  contactNo         String
  gender            String
  bloodGroup        String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  semesterId        String
  departmentId      String
  academicFacultyId String
  semester          Semester        @relation(fields: [semesterId], references: [id])
  department        Department      @relation(fields: [departmentId], references: [id])
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])

  @@map("students")
}

model Faculty {
  id                String          @id @default(uuid())
  facultyId         String
  firstName         String
  lastName          String
  middleName        String
  profileImage      String
  email             String
  contactNo         String
  gender            String
  bloodGroup        String
  designation       String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  departmentId      String
  academicFacultyId String
  department        Department      @relation(fields: [departmentId], references: [id])
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  courses           CourseFaculty[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  buildingId String
  building   Building @relation(fields: [buildingId], references: [id])

  @@map("rooms")
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  preRequisite    CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  faculties       CourseFaculty[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String
  course         Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  preRequisite   Course @relation(fields: [preRequisiteId], references: [id], name: "PrerequisiteToCourse")

  @@id([courseId, preRequisiteId])
  @@map("course_prerequisite")
}

model CourseFaculty {
  courseId  String
  facultyId String
  course    Course  @relation(fields: [courseId], references: [id])
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id         String                      @id @default(uuid())
  startDate  DateTime
  endDate    DateTime
  status     SemesterRegistrationStatus? @default(UPCOMING)
  minCredit  Int                         @default(0)
  maxCredit  Int                         @default(0)
  createdAt  DateTime                    @default(now())
  updatedAt  DateTime                    @updatedAt
  semesterId String
  semester   Semester                    @relation(fields: [semesterId], references: [id])

  @@map("semester_registrations")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
