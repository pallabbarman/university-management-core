// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Semester {
  id                     String                  @id @default(uuid())
  year                   Int
  title                  String
  code                   String
  startMonth             String
  endMonth               String
  isCurrent              Boolean?                @default(false)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  students               Student[]
  semesterRegistrations  SemesterRegistration[]
  studentEnrolledCourses StudentEnrolledCourse[]

  @@map("semesters")
}

model AcademicFaculty {
  id          String       @id @default(uuid())
  title       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
  students    Student[]
  faculties   Faculty[]

  @@map("academicfaculties")
}

model Department {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFacultyId String
  students          Student[]
  faculties         Faculty[]
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  offeredCourses    OfferedCourse[]

  @@map("departments")
}

model Student {
  id                                 String                              @id @default(uuid())
  studentId                          String
  firstName                          String
  lastName                           String
  middleName                         String
  profileImage                       String
  email                              String
  contactNo                          String
  gender                             String
  bloodGroup                         String
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  semesterId                         String
  departmentId                       String
  academicFacultyId                  String
  semester                           Semester                            @relation(fields: [semesterId], references: [id])
  department                         Department                          @relation(fields: [departmentId], references: [id])
  academicFaculty                    AcademicFaculty                     @relation(fields: [academicFacultyId], references: [id])
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  studentEnrolledCourses             StudentEnrolledCourse[]

  @@map("students")
}

model Faculty {
  id                          String                       @id @default(uuid())
  facultyId                   String
  firstName                   String
  lastName                    String
  middleName                  String
  profileImage                String
  email                       String
  contactNo                   String
  gender                      String
  bloodGroup                  String
  designation                 String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  departmentId                String
  academicFacultyId           String
  department                  Department                   @relation(fields: [departmentId], references: [id])
  academicFaculty             AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  courses                     CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id                          String                       @id @default(uuid())
  roomNumber                  String
  floor                       String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  buildingId                  String
  building                    Building                     @relation(fields: [buildingId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id                     String                  @id @default(uuid())
  title                  String
  code                   String
  credits                Int                     @default(0)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  preRequisite           CourseToPrerequisite[]  @relation("CourseToPrerequisite")
  preRequisiteFor        CourseToPrerequisite[]  @relation("PrerequisiteToCourse")
  faculties              CourseFaculty[]
  offeredCourses         OfferedCourse[]
  studentEnrolledCourses StudentEnrolledCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String
  course         Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  preRequisite   Course @relation(fields: [preRequisiteId], references: [id], name: "PrerequisiteToCourse")

  @@id([courseId, preRequisiteId])
  @@map("course_prerequisite")
}

model CourseFaculty {
  courseId  String
  facultyId String
  course    Course  @relation(fields: [courseId], references: [id])
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                                 String                              @id @default(uuid())
  startDate                          DateTime
  endDate                            DateTime
  status                             SemesterRegistrationStatus?         @default(UPCOMING)
  minCredit                          Int                                 @default(0)
  maxCredit                          Int                                 @default(0)
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  semesterId                         String
  semester                           Semester                            @relation(fields: [semesterId], references: [id])
  offeredCourses                     OfferedCourse[]
  offeredCourseSections              OfferedCourseSection[]
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("semester_registrations")
}

model OfferedCourse {
  id                                 String                              @id @default(uuid())
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  courseId                           String
  departmentId                       String
  semesterRegistrationId             String
  course                             Course                              @relation(fields: [courseId], references: [id])
  department                         Department                          @relation(fields: [departmentId], references: [id])
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections              OfferedCourseSection[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                                 String                              @id @default(uuid())
  title                              String
  maxCapacity                        Int
  currentlyEnrolledStudent           Int                                 @default(0)
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  offeredCourseId                    String
  semesterRegistrationId             String
  offeredCourse                      OfferedCourse                       @relation(fields: [offeredCourseId], references: [id])
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_course_sections")
}

model OfferedCourseClassSchedule {
  id                     String               @id @default(uuid())
  startTime              String
  endTime                String
  dayOfWeek              WeekDays             @default(SATURDAY)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  roomId                 String
  facultyId              String
  offeredCourseSectionId String
  semesterRegistrationId String
  room                   Room                 @relation(fields: [roomId], references: [id])
  faculty                Faculty              @relation(fields: [facultyId], references: [id])
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("offered_course_class_schedules")
}

model StudentSemesterRegistration {
  id                     String               @id @default(uuid())
  isConfirmed            Boolean?             @default(false)
  totalCreditsTaken      Int?                 @default(0)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student_semester_registrations")
}

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  offeredCourseId        String
  offeredCourse          OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseId])
  @@map("student_semester_registration_courses")
}

model StudentEnrolledCourse {
  id         String                       @id @default(uuid())
  createdAt  DateTime                     @default(now())
  updatedAt  DateTime                     @updatedAt
  studentId  String
  student    Student                      @relation(fields: [studentId], references: [id])
  courseId   String
  course     Course                       @relation(fields: [courseId], references: [id])
  semesterId String
  semester   Semester                     @relation(fields: [semesterId], references: [id])
  grade      String?
  point      Float?                       @default(0)
  totalMarks Int?                         @default(0)
  status     StudentEnrolledCourseStatus? @default(ONGOING)

  @@map("student_enrolled_courses")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum StudentEnrolledCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}
